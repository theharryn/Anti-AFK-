import pyautogui
import time
import random
from pynput import keyboard

# Variáveis para rastrear se as funções estão ativadas
mouse_movement_enabled = True
wasd_enabled = True

# Dicionário de textos para cada idioma
language_texts = {
    'en': {
        'mouse_enabled': 'Mouse Movement Enabled',
        'mouse_disabled': 'Mouse Movement Disabled',
        'wasd_enabled': 'WASD Enabled',
        'wasd_disabled': 'WASD Disabled'
    },
    'pt': {
        'mouse_enabled': 'Movimento do Mouse Habilitado',
        'mouse_disabled': 'Movimento do Mouse Desabilitado',
        'wasd_enabled': 'WASD Habilitado',
        'wasd_disabled': 'WASD Desabilitado'
    },
    'ru': {
        'mouse_enabled': 'Движение мыши включено',
        'mouse_disabled': 'Движение мыши отключено',
        'wasd_enabled': 'WASD включено',
        'wasd_disabled': 'WASD отключено'
    },
    'es': {
        'mouse_enabled': 'Movimiento del ratón habilitado',
        'mouse_disabled': 'Movimiento del ratón deshabilitado',
        'wasd_enabled': 'WASD habilitado',
        'wasd_disabled': 'WASD deshabilitado'
    },
    'zh': {
        'mouse_enabled': '鼠标移动已启用',
        'mouse_disabled': '鼠标移动已禁用',
        'wasd_enabled': 'WASD 已启用',
        'wasd_disabled': 'WASD 已禁用'
    }
}

# Função para obter texto do idioma atual
def get_text(key):
    current_language = 'en'  # Idioma padrão é inglês, pode ser alterado conforme necessário
    return language_texts.get(current_language, {}).get(key, '')

def move_mouse():
    x_offset = 10  # Ajuste conforme necessário
    y_offset = 5   # Ajuste conforme necessário
    pyautogui.move(x_offset, y_offset)

def press_random_key():
    keys = ['w', 'a', 's', 'd']
    random_key = random.choice(keys)
    pyautogui.press(random_key)

def on_press(key):
    global mouse_movement_enabled, wasd_enabled  # Permite modificar as variáveis globais

    if key == keyboard.Key.esc:
        exit()
    elif key == keyboard.Key.space:
        # Inverte o estado da função de mover o mouse ao pressionar a tecla Space
        mouse_movement_enabled = not mouse_movement_enabled
        print(get_text('mouse_enabled') if mouse_movement_enabled else get_text('mouse_disabled'))
    elif key == keyboard.Key.shift:
        # Inverte o estado da função WASD ao pressionar a tecla Shift
        wasd_enabled = not wasd_enabled
        print(get_text('wasd_enabled') if wasd_enabled else get_text('wasd_disabled'))

def print_colored_ascii_art():
    # Caracteres especiais para simular um estilo "hacker"
    colored_text = "\033[1;32;40m" + "██████╗░██╗░░░██╗░██████╗██╗░░░██╗" + "\n" + \
                   "██╔══██╗╚██╗░██╔╝██╔════╝╚██╗░██╔╝" + "\n" + \
                   "██████╔╝░╚████╔╝░╚█████╗░░╚████╔╝░" + "\n" + \
                   "██╔══██╗░░╚██╔╝░░░╚═══██╗░░╚██╔╝░░" + "\n" + \
                   "██║░░██║░░░██║░░░██████╔╝░░░██║░░░" + "\n" + \
                   "╚═╝░░╚═╝░░░╚═╝░░░╚═════╝░░░░╚═╝░░░" + "\033[0;0m"

    print(colored_text)

def main():
    interval_minutes = 5  # Ajuste conforme necessário
    listener = keyboard.Listener(on_press=on_press)
    listener.start()

    print_colored_ascii_art()

    while True:
        if mouse_movement_enabled:
            move_mouse()
        if wasd_enabled:
            press_random_key()
        time.sleep(interval_minutes * 60)

if __name__ == "__main__":
    main()
